# Общая информация для всех агентов

## Проект: Онлайн-магазин цветов "Флора"

### Структура проекта
```
/flower-shop
  /frontend          # React приложение
    /src
      /components    # UI компоненты
      /pages         # Страницы приложения
      /redux         # Управление состоянием
      /styles        # SCSS стили
      /utils         # Вспомогательные функции
  /backend           # Node.js/Express API
    /src
      /controllers   # Обработчики запросов
      /models        # Схемы данных
      /routes        # API маршруты
      /services      # Бизнес-логика
      /utils         # Вспомогательные функции
  /admin             # Админ-панель (React)
  /database          # Конфигурация БД
  /infrastructure    # Docker, CI/CD конфигурация
  /docs              # Документация
```

> Структура создана! Базовые файлы настроены. Работайте в соответствующих директориях.
> 
> Структура файлов инициализирована:
> - Документация API: `/flower-shop/docs/api-spec.md`
> - Схема базы данных: `/flower-shop/docs/db-schema.md`
> - Файлы package.json для frontend/backend
> - Docker конфигурация: `/flower-shop/infrastructure/docker-compose.yml`

### CI/CD пайплайн
1. **Локальная разработка**:
   - Клонирование репозитория
   - Установка зависимостей (`npm install`)
   - Запуск локальной среды (`npm run dev`)
   - Написание кода и тестов

2. **Подготовка изменений**:
   - Создание ветки для задачи (`git checkout -b feature/название`)
   - Написание тестов и реализация функциональности
   - Запуск линтеров и тестов локально

3. **Отправка изменений**:
   - Создание PR/MR в основную ветку
   - Запуск автоматических проверок в CI
   - Ревью кода другими разработчиками
   - Внесение правок по ревью

4. **Принятие изменений**:
   - Мерж PR в основную ветку после одобрения
   - Автоматическая сборка и деплой на тестовую среду
   - Тестирование на тестовой среде

5. **Релиз**:
   - Запуск пайплайна для релиза в продакшн
   - Создание тега версии
   - Автоматический деплой на продакшн
   - Мониторинг после деплоя

### API контракты
- Используйте OpenAPI/Swagger для документирования API
- Формат эндпоинтов: `/api/v1/{ресурс}`
- Придерживайтесь REST-принципов
- Используйте JSON для запросов/ответов
- HTTP коды: 200 (успех), 201 (создано), 400 (ошибка клиента), 500 (ошибка сервера)
- Авторизация: JWT токены в заголовке `Authorization: Bearer {token}`

### Технологический стек
- Frontend: React, Redux, SCSS
- Backend: Node.js, Express
- База данных: MongoDB
- Дополнительно: Docker, Jest, Swagger

### Ключевые функции проекта
1. Каталог товаров с фильтрацией и поиском
2. Детальные страницы товаров с описанием, фото и ценами
3. Корзина покупок и оформление заказа
4. Регистрация/авторизация пользователей
5. Личный кабинет с историей заказов
6. Интеграция с платежными системами
7. Система управления доставкой
8. Административная панель
9. Система отзывов и рейтингов
10. Уведомления (email, SMS)

### Методология разработки
- Agile/Scrum подход
- Двухнедельные спринты
- Ежедневные статус-апдейты
- Code review перед мержем кода

### Правила коммуникации
- Регулярно проверяйте свой и общий файл задач
- При вопросах обращайтесь к тимлиду через свой файл
- Сообщайте о завершении задач и блокерах
- ВАЖНО: Все сообщения должны быть максимально краткими и экономить токены
- Избегайте лишних слов и формальностей