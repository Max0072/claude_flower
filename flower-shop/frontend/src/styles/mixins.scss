@import './variables.scss';

// Flexbox mixins
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

// Responsive breakpoints
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: #{$breakpoint-sm - 1px}) {
      @content;
    }
  } @else if $breakpoint == sm {
    @media (min-width: #{$breakpoint-sm}) and (max-width: #{$breakpoint-md - 1px}) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (min-width: #{$breakpoint-md}) and (max-width: #{$breakpoint-lg - 1px}) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (min-width: #{$breakpoint-lg}) and (max-width: #{$breakpoint-xl - 1px}) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media (min-width: #{$breakpoint-xl}) {
      @content;
    }
  }
}

// Mobile first approach
@mixin mobile {
  @media (max-width: #{$breakpoint-md - 1px}) {
    @content;
  }
}

@mixin tablet-up {
  @media (min-width: #{$breakpoint-md}) {
    @content;
  }
}

@mixin desktop-up {
  @media (min-width: #{$breakpoint-lg}) {
    @content;
  }
}

// Typography mixins
@mixin typography($size, $weight: normal, $line-height: 1.5, $family: $font-family-primary) {
  font-size: $size;
  font-weight: $weight;
  line-height: $line-height;
  font-family: $family;
}

@mixin heading($size) {
  font-family: $font-family-secondary;
  font-weight: bold;
  font-size: $size;
  margin-bottom: $spacing-md;
}

// Button mixin
@mixin button($bg-color: $primary-color, $text-color: white, $hover-darken: 10%) {
  background-color: $bg-color;
  color: $text-color;
  border: none;
  border-radius: $border-radius-md;
  padding: $spacing-sm $spacing-lg;
  font-size: $font-size-md;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.2s ease;
  
  &:hover {
    background-color: darken($bg-color, $hover-darken);
    transform: translateY(-2px);
  }
  
  &:active {
    transform: translateY(0);
  }
  
  &:disabled {
    background-color: $light-gray;
    color: $text-color-secondary;
    cursor: not-allowed;
    transform: none;
  }
}

// Card mixin
@mixin card($padding: $spacing-md, $border-radius: $border-radius-md, $shadow: $shadow-md) {
  background-color: $background-color;
  padding: $padding;
  border-radius: $border-radius;
  box-shadow: $shadow;
}

// Truncate text
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Multi-line ellipsis
@mixin text-ellipsis($lines: 2) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
}

// Transitions
@mixin transition($property: all, $duration: 0.3s, $timing: ease) {
  transition: $property $duration $timing;
}

// Animations
@mixin hover-lift {
  transition: transform 0.2s ease-in-out;
  
  &:hover {
    transform: translateY(-4px);
  }
}

// Focus accessible styles
@mixin focus-outline {
  &:focus {
    outline: 2px solid $primary-color;
    outline-offset: 2px;
  }
}